package projects.cmis242.sequence;

import javax.swing.*;
import java.io.FileWriter;
import java.io.IOException;

/**
 * @author jbjulia
 */
public class GUI extends javax.swing.JFrame {

    // Variable declaration
    private int n;
    private int result;
    private int efficiency;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnCompute;
    private javax.swing.ButtonGroup buttonGroup;
    private javax.swing.JLabel lblEfficiency;
    private javax.swing.JLabel lblInput;
    private javax.swing.JLabel lblResult;
    private javax.swing.JRadioButton radIterative;
    private javax.swing.JRadioButton radRecursive;
    private javax.swing.JTextField txtEfficiency;
    private javax.swing.JTextField txtInput;
    private javax.swing.JTextField txtResult;
    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();

        setLocationRelativeTo(null);
        setResizable(false);

        radIterative.doClick();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup = new javax.swing.ButtonGroup();
        radIterative = new javax.swing.JRadioButton();
        radRecursive = new javax.swing.JRadioButton();
        txtInput = new javax.swing.JTextField();
        lblInput = new javax.swing.JLabel();
        btnCompute = new javax.swing.JButton();
        txtResult = new javax.swing.JTextField();
        lblResult = new javax.swing.JLabel();
        txtEfficiency = new javax.swing.JTextField();
        lblEfficiency = new javax.swing.JLabel();
        btnClear = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Project 3");
        setName("MainWindow"); // NOI18N
        setPreferredSize(new java.awt.Dimension(300, 300));
        setSize(new java.awt.Dimension(300, 300));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        buttonGroup.add(radIterative);
        radIterative.setText("Iterative");

        buttonGroup.add(radRecursive);
        radRecursive.setText("Recursive");

        txtInput.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        lblInput.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblInput.setText("Enter N:");

        btnCompute.setText("Compute");
        btnCompute.setToolTipText("");
        btnCompute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnComputeActionPerformed(evt);
            }
        });

        txtResult.setEditable(false);
        txtResult.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtResult.setEnabled(false);

        lblResult.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblResult.setText("Result");
        lblResult.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        txtEfficiency.setEditable(false);
        txtEfficiency.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtEfficiency.setEnabled(false);

        lblEfficiency.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblEfficiency.setText("Efficiency");
        lblEfficiency.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        btnClear.setText("Clear");
        btnClear.setToolTipText("");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(25, 25, 25)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(radIterative, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(radRecursive, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(40, 40, 40)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(txtInput, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(lblInput, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(20, 20, 20)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(lblResult, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(txtResult, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(txtEfficiency, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(lblEfficiency, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(btnCompute, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(btnClear)))))
                                .addContainerGap(25, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[]{btnClear, btnCompute});

        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(radIterative, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lblInput, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(30, 30, 30)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(radRecursive, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(txtInput, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(btnCompute, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btnClear))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lblResult, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lblEfficiency, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(30, 30, 30)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(txtResult, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(txtEfficiency, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addContainerGap(29, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[]{btnClear, btnCompute});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Compute Iterative / Recursive sequence and display results
     */
    private void btnComputeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnComputeActionPerformed
        // Check for null field
        if (txtInput.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter a value for N.");
        } else {
            try {
                // Parse user input
                n = Integer.parseInt(txtInput.getText());

                // Check selection and compute
                if (radIterative.isSelected()) {
                    result = Sequence.computeIterative(n);
                    efficiency = Sequence.getEfficiency();
                } else {
                    result = Sequence.computeRecursive(n);
                    efficiency = Sequence.getEfficiency();
                }

                // Enable text fields and display results
                txtResult.setEnabled(true);
                txtEfficiency.setEnabled(true);
                txtResult.setText("" + result);
                txtEfficiency.setText("" + efficiency);
            } catch (NumberFormatException d) {
                JOptionPane.showMessageDialog(null, "Error!\n\nPlease enter a valid number.");
            }
        }
    }//GEN-LAST:event_btnComputeActionPerformed

    /**
     * Write output to text file on exit
     */
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        try {
            // Initialize FileWriter
            FileWriter file = new FileWriter("efficiency-values");

            // Append column names
            file.append("n,Iterative,Recursive\n");

            // Append computations
            for (n = 0; n <= 10; n++) {
                file.append(Integer.toString(n));
                file.append(",");
                Sequence.computeIterative(n);
                file.append(String.valueOf(Integer.toString(Sequence.getEfficiency())));
                file.append(",");
                Sequence.computeRecursive(n);
                file.append(String.valueOf(Integer.toString(Sequence.getEfficiency())));
                file.append("\n");
            }

            // Flush and close FileWriter
            file.flush();
            file.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_formWindowClosing

    /**
     * Clear inputs and reset form to default state
     */
    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // Clear text fields
        txtInput.setText("");
        txtResult.setText("");
        txtEfficiency.setText("");

        // Disable output text fields
        txtResult.setEnabled(false);
        txtEfficiency.setEnabled(false);
    }//GEN-LAST:event_btnClearActionPerformed
    // End of variables declaration//GEN-END:variables
}
