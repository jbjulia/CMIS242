package projects.cmis242.students;

import javax.swing.*;
import java.util.HashMap;

/**
 * @author jbjulia
 */
public class GUI extends javax.swing.JFrame {

    String[] strGrade = {"A", "B", "C", "D", "F"};
    String[] strCredit = {"3", "6"};
    // HashMap instance
    HashMap<String, Students> student = new HashMap<>();
    // Variable declaration
    private String studentID;
    private String name;
    private String major;
    private String selection;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnProcess;
    private javax.swing.JComboBox<String> cmbOperation;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JLabel lblMajor;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblOperation;
    private javax.swing.JLabel lblStudentID;
    private javax.swing.JTextField txtMajor;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtStudentID;
    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();

        // Center main window and fix size
        setLocationRelativeTo(null);
        setResizable(false);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new GUI().setVisible(true);
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        lblStudentID = new javax.swing.JLabel();
        lblName = new javax.swing.JLabel();
        lblMajor = new javax.swing.JLabel();
        txtStudentID = new javax.swing.JTextField();
        txtName = new javax.swing.JTextField();
        txtMajor = new javax.swing.JTextField();
        lblOperation = new javax.swing.JLabel();
        cmbOperation = new javax.swing.JComboBox<>();
        btnProcess = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Student Database");

        lblStudentID.setText("Student ID:");

        lblName.setText("Name:");

        lblMajor.setText("Major:");

        txtStudentID.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        txtName.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        txtMajor.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        lblOperation.setText("Select Operation:");

        cmbOperation.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{"", "Insert", "Delete", "Find", "Update"}));

        btnProcess.setText("Process");
        btnProcess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProcessActionPerformed(evt);
            }
        });

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(lblStudentID, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txtStudentID, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(lblName, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                        .addComponent(btnProcess, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(lblMajor, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE)
                                                        .addComponent(lblOperation, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(txtMajor, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                                                        .addComponent(cmbOperation, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(btnClear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                .addContainerGap(25, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[]{lblMajor, lblName, lblStudentID, txtMajor, txtName, txtStudentID});

        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(lblStudentID, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txtStudentID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(lblName)
                                        .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(lblMajor)
                                        .addComponent(txtMajor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(lblOperation, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
                                        .addComponent(cmbOperation))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(btnProcess, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(25, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[]{lblMajor, lblName, lblStudentID, txtMajor, txtName, txtStudentID});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Executes selected function from combo box
     *
     * @return Returns student record
     */
    private void btnProcessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProcessActionPerformed
        // Getters for form values
        studentID = txtStudentID.getText();
        name = txtName.getText();
        major = txtMajor.getText();
        selection = cmbOperation.getSelectedItem().toString();

        try {
            // Checks for empty fields
            if (studentID.isEmpty()) {
                throw new NullPointerException();
            } else {
                // Switch statement for combo box
                switch (selection) {

                    // Insert operation
                    case "Insert":
                        // Check for empty fields
                        if (name.isEmpty() | major.isEmpty()) {
                            JOptionPane.showMessageDialog(null, "Please fill in the required text fields.", "Error", JOptionPane.ERROR_MESSAGE);
                            return;
                        } else {
                            // Checks database for existing key
                            if (student.containsKey(studentID)) {
                                JOptionPane.showMessageDialog(null, "Error:\n\nStudent ID already exists!", "Insert Error", JOptionPane.ERROR_MESSAGE);
                            } else {
                                // Adds student to database
                                student.put(studentID, new Students(name, major));
                                JOptionPane.showMessageDialog(null, "Success!\n\nStudent added to database.", "Complete", JOptionPane.INFORMATION_MESSAGE);
                            }
                        }
                        break;

                    // Delete operation
                    case "Delete":
                        // Checks database for existing key
                        if (!student.containsKey(studentID)) {
                            JOptionPane.showMessageDialog(null, "Error:\n\nStudent ID does not exist.", "Delete Error", JOptionPane.ERROR_MESSAGE);
                        } else {
                            // Deletes student from database
                            student.remove(studentID);
                            JOptionPane.showMessageDialog(null, "Success!\n\nStudent removed from database.", "Complete", JOptionPane.INFORMATION_MESSAGE);
                        }
                        break;

                    // Find operation
                    case "Find":
                        // Checks database for existing key
                        if (!student.containsKey(studentID)) {
                            JOptionPane.showMessageDialog(null, "No record for this student was found.", "Find Error", JOptionPane.ERROR_MESSAGE);
                        } else {
                            // Finds and returns student record from database
                            student.get(studentID);
                            String toString = student.get(studentID).toString();
                            JOptionPane.showMessageDialog(null, "Success!\n\nStudent found in database:\n" + toString, "Complete", JOptionPane.INFORMATION_MESSAGE);
                        }
                        break;

                    // Update operation
                    case "Update":
                        // Checks database for existing key
                        if (student.containsKey(studentID)) {
                            String grade = (String) JOptionPane.showInputDialog(null, "Please select a grade:", "", JOptionPane.QUESTION_MESSAGE, null, strGrade, strGrade[0]);
                            if (grade != null) {
                                String creditHours = (String) JOptionPane.showInputDialog(null, "Please select credit total:", "", JOptionPane.QUESTION_MESSAGE, null, strCredit, strCredit[0]);
                                if (creditHours != null) {
                                    student.get(studentID).courseCompleted(grade, Integer.parseInt(creditHours));
                                    JOptionPane.showMessageDialog(null, "Success!\n\nStudent record was updated.", "Complete", JOptionPane.INFORMATION_MESSAGE);
                                } else {
                                    JOptionPane.showMessageDialog(null, "Error:\n\nCredits already exist.", "Update Error", JOptionPane.ERROR_MESSAGE);
                                }
                            } else {
                                JOptionPane.showMessageDialog(null, "Error:\n\nCould not update grade.", "Update Error", JOptionPane.ERROR_MESSAGE);
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "Error:\n\nCould not update record.", "Update Error", JOptionPane.ERROR_MESSAGE);
                        }
                        break;
                }
            }
        } catch (NullPointerException e1) {
            JOptionPane.showMessageDialog(null, "Please fill in the required text fields.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        // Clears and resets form
        btnClear.doClick();
    }//GEN-LAST:event_btnProcessActionPerformed

    /**
     * Resets form to default state and clears text fields
     */
    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        txtStudentID.setText("");
        txtName.setText("");
        txtMajor.setText("");
        cmbOperation.setSelectedIndex(0);
        txtStudentID.grabFocus();

        //JOptionPane.showMessageDialog(null, "Form has been reset.", "Complete", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnClearActionPerformed
    // End of variables declaration//GEN-END:variables
}
